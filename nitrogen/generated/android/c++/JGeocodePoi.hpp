///
/// JGeocodePoi.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "GeocodePoi.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::nitrobaidugeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "GeocodePoi" and the the Kotlin data class "GeocodePoi".
   */
  struct JGeocodePoi final: public jni::JavaClass<JGeocodePoi> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrobaidugeolocation/GeocodePoi;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct GeocodePoi by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    GeocodePoi toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldUid = clazz->getField<jni::JString>("uid");
      jni::local_ref<jni::JString> uid = this->getFieldValue(fieldUid);
      static const auto fieldName = clazz->getField<jni::JString>("name");
      jni::local_ref<jni::JString> name = this->getFieldValue(fieldName);
      static const auto fieldTags = clazz->getField<jni::JString>("tags");
      jni::local_ref<jni::JString> tags = this->getFieldValue(fieldTags);
      static const auto fieldAddr = clazz->getField<jni::JString>("addr");
      jni::local_ref<jni::JString> addr = this->getFieldValue(fieldAddr);
      static const auto fieldRelaiability = clazz->getField<jni::JDouble>("relaiability");
      jni::local_ref<jni::JDouble> relaiability = this->getFieldValue(fieldRelaiability);
      static const auto fieldDirectionDesc = clazz->getField<jni::JString>("directionDesc");
      jni::local_ref<jni::JString> directionDesc = this->getFieldValue(fieldDirectionDesc);
      return GeocodePoi(
        uid != nullptr ? std::make_optional(uid->toStdString()) : std::nullopt,
        name != nullptr ? std::make_optional(name->toStdString()) : std::nullopt,
        tags != nullptr ? std::make_optional(tags->toStdString()) : std::nullopt,
        addr != nullptr ? std::make_optional(addr->toStdString()) : std::nullopt,
        relaiability != nullptr ? std::make_optional(relaiability->value()) : std::nullopt,
        directionDesc != nullptr ? std::make_optional(directionDesc->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JGeocodePoi::javaobject> fromCpp(const GeocodePoi& value) {
      return newInstance(
        value.uid.has_value() ? jni::make_jstring(value.uid.value()) : nullptr,
        value.name.has_value() ? jni::make_jstring(value.name.value()) : nullptr,
        value.tags.has_value() ? jni::make_jstring(value.tags.value()) : nullptr,
        value.addr.has_value() ? jni::make_jstring(value.addr.value()) : nullptr,
        value.relaiability.has_value() ? jni::JDouble::valueOf(value.relaiability.value()) : nullptr,
        value.directionDesc.has_value() ? jni::make_jstring(value.directionDesc.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrobaidugeolocation
