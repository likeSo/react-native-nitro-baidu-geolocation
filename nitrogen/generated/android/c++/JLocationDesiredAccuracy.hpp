///
/// JLocationDesiredAccuracy.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "LocationDesiredAccuracy.hpp"

namespace margelo::nitro::nitrobaidugeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "LocationDesiredAccuracy" and the the Kotlin enum "LocationDesiredAccuracy".
   */
  struct JLocationDesiredAccuracy final: public jni::JavaClass<JLocationDesiredAccuracy> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrobaidugeolocation/LocationDesiredAccuracy;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum LocationDesiredAccuracy.
     */
    [[maybe_unused]]
    [[nodiscard]]
    LocationDesiredAccuracy toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<LocationDesiredAccuracy>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JLocationDesiredAccuracy> fromCpp(LocationDesiredAccuracy value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldBEST = clazz->getStaticField<JLocationDesiredAccuracy>("BEST");
      static const auto fieldBESTFORNAVIGATION = clazz->getStaticField<JLocationDesiredAccuracy>("BESTFORNAVIGATION");
      static const auto fieldNEARESTTENMETERS = clazz->getStaticField<JLocationDesiredAccuracy>("NEARESTTENMETERS");
      static const auto fieldHUNDREDMETERS = clazz->getStaticField<JLocationDesiredAccuracy>("HUNDREDMETERS");
      static const auto fieldKILOMETER = clazz->getStaticField<JLocationDesiredAccuracy>("KILOMETER");
      static const auto fieldTHREEKILOMETERS = clazz->getStaticField<JLocationDesiredAccuracy>("THREEKILOMETERS");
      
      switch (value) {
        case LocationDesiredAccuracy::BEST:
          return clazz->getStaticFieldValue(fieldBEST);
        case LocationDesiredAccuracy::BESTFORNAVIGATION:
          return clazz->getStaticFieldValue(fieldBESTFORNAVIGATION);
        case LocationDesiredAccuracy::NEARESTTENMETERS:
          return clazz->getStaticFieldValue(fieldNEARESTTENMETERS);
        case LocationDesiredAccuracy::HUNDREDMETERS:
          return clazz->getStaticFieldValue(fieldHUNDREDMETERS);
        case LocationDesiredAccuracy::KILOMETER:
          return clazz->getStaticFieldValue(fieldKILOMETER);
        case LocationDesiredAccuracy::THREEKILOMETERS:
          return clazz->getStaticFieldValue(fieldTHREEKILOMETERS);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrobaidugeolocation
