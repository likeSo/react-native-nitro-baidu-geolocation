///
/// JGeocode.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Geocode.hpp"

#include "GeocodePoi.hpp"
#include "JGeocodePoi.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::nitrobaidugeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Geocode" and the the Kotlin data class "Geocode".
   */
  struct JGeocode final: public jni::JavaClass<JGeocode> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrobaidugeolocation/Geocode;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Geocode by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Geocode toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCountry = clazz->getField<jni::JString>("country");
      jni::local_ref<jni::JString> country = this->getFieldValue(fieldCountry);
      static const auto fieldCountryCode = clazz->getField<jni::JString>("countryCode");
      jni::local_ref<jni::JString> countryCode = this->getFieldValue(fieldCountryCode);
      static const auto fieldProvince = clazz->getField<jni::JString>("province");
      jni::local_ref<jni::JString> province = this->getFieldValue(fieldProvince);
      static const auto fieldCity = clazz->getField<jni::JString>("city");
      jni::local_ref<jni::JString> city = this->getFieldValue(fieldCity);
      static const auto fieldDistrict = clazz->getField<jni::JString>("district");
      jni::local_ref<jni::JString> district = this->getFieldValue(fieldDistrict);
      static const auto fieldTown = clazz->getField<jni::JString>("town");
      jni::local_ref<jni::JString> town = this->getFieldValue(fieldTown);
      static const auto fieldStreet = clazz->getField<jni::JString>("street");
      jni::local_ref<jni::JString> street = this->getFieldValue(fieldStreet);
      static const auto fieldStreetNumber = clazz->getField<jni::JString>("streetNumber");
      jni::local_ref<jni::JString> streetNumber = this->getFieldValue(fieldStreetNumber);
      static const auto fieldCityCode = clazz->getField<jni::JString>("cityCode");
      jni::local_ref<jni::JString> cityCode = this->getFieldValue(fieldCityCode);
      static const auto fieldAdCode = clazz->getField<jni::JString>("adCode");
      jni::local_ref<jni::JString> adCode = this->getFieldValue(fieldAdCode);
      static const auto fieldLocationDescribe = clazz->getField<jni::JString>("locationDescribe");
      jni::local_ref<jni::JString> locationDescribe = this->getFieldValue(fieldLocationDescribe);
      static const auto fieldPoiList = clazz->getField<jni::JArrayClass<JGeocodePoi>>("poiList");
      jni::local_ref<jni::JArrayClass<JGeocodePoi>> poiList = this->getFieldValue(fieldPoiList);
      static const auto fieldPoi = clazz->getField<JGeocodePoi>("poi");
      jni::local_ref<JGeocodePoi> poi = this->getFieldValue(fieldPoi);
      return Geocode(
        country != nullptr ? std::make_optional(country->toStdString()) : std::nullopt,
        countryCode != nullptr ? std::make_optional(countryCode->toStdString()) : std::nullopt,
        province != nullptr ? std::make_optional(province->toStdString()) : std::nullopt,
        city != nullptr ? std::make_optional(city->toStdString()) : std::nullopt,
        district != nullptr ? std::make_optional(district->toStdString()) : std::nullopt,
        town != nullptr ? std::make_optional(town->toStdString()) : std::nullopt,
        street != nullptr ? std::make_optional(street->toStdString()) : std::nullopt,
        streetNumber != nullptr ? std::make_optional(streetNumber->toStdString()) : std::nullopt,
        cityCode != nullptr ? std::make_optional(cityCode->toStdString()) : std::nullopt,
        adCode != nullptr ? std::make_optional(adCode->toStdString()) : std::nullopt,
        locationDescribe != nullptr ? std::make_optional(locationDescribe->toStdString()) : std::nullopt,
        poiList != nullptr ? std::make_optional([&]() {
          size_t __size = poiList->size();
          std::vector<GeocodePoi> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = poiList->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt,
        poi != nullptr ? std::make_optional(poi->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JGeocode::javaobject> fromCpp(const Geocode& value) {
      return newInstance(
        value.country.has_value() ? jni::make_jstring(value.country.value()) : nullptr,
        value.countryCode.has_value() ? jni::make_jstring(value.countryCode.value()) : nullptr,
        value.province.has_value() ? jni::make_jstring(value.province.value()) : nullptr,
        value.city.has_value() ? jni::make_jstring(value.city.value()) : nullptr,
        value.district.has_value() ? jni::make_jstring(value.district.value()) : nullptr,
        value.town.has_value() ? jni::make_jstring(value.town.value()) : nullptr,
        value.street.has_value() ? jni::make_jstring(value.street.value()) : nullptr,
        value.streetNumber.has_value() ? jni::make_jstring(value.streetNumber.value()) : nullptr,
        value.cityCode.has_value() ? jni::make_jstring(value.cityCode.value()) : nullptr,
        value.adCode.has_value() ? jni::make_jstring(value.adCode.value()) : nullptr,
        value.locationDescribe.has_value() ? jni::make_jstring(value.locationDescribe.value()) : nullptr,
        value.poiList.has_value() ? [&]() {
          size_t __size = value.poiList.value().size();
          jni::local_ref<jni::JArrayClass<JGeocodePoi>> __array = jni::JArrayClass<JGeocodePoi>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.poiList.value()[__i];
            __array->setElement(__i, *JGeocodePoi::fromCpp(__element));
          }
          return __array;
        }() : nullptr,
        value.poi.has_value() ? JGeocodePoi::fromCpp(value.poi.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrobaidugeolocation
