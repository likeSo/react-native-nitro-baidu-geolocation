///
/// JCoordinateType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "CoordinateType.hpp"

namespace margelo::nitro::nitrobaidugeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "CoordinateType" and the the Kotlin enum "CoordinateType".
   */
  struct JCoordinateType final: public jni::JavaClass<JCoordinateType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrobaidugeolocation/CoordinateType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum CoordinateType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    CoordinateType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<CoordinateType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JCoordinateType> fromCpp(CoordinateType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldBMK09LL = clazz->getStaticField<JCoordinateType>("BMK09LL");
      static const auto fieldBMK09MC = clazz->getStaticField<JCoordinateType>("BMK09MC");
      static const auto fieldWGS84 = clazz->getStaticField<JCoordinateType>("WGS84");
      static const auto fieldGCJ02 = clazz->getStaticField<JCoordinateType>("GCJ02");
      
      switch (value) {
        case CoordinateType::BMK09LL:
          return clazz->getStaticFieldValue(fieldBMK09LL);
        case CoordinateType::BMK09MC:
          return clazz->getStaticFieldValue(fieldBMK09MC);
        case CoordinateType::WGS84:
          return clazz->getStaticFieldValue(fieldWGS84);
        case CoordinateType::GCJ02:
          return clazz->getStaticFieldValue(fieldGCJ02);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrobaidugeolocation
