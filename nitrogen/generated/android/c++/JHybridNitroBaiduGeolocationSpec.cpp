///
/// JHybridNitroBaiduGeolocationSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroBaiduGeolocationSpec.hpp"

// Forward declaration of `Location` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Location; }
// Forward declaration of `Coordinate` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Coordinate; }
// Forward declaration of `Geocode` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Geocode; }
// Forward declaration of `GeocodePoi` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct GeocodePoi; }
// Forward declaration of `GetLocationOptions` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct GetLocationOptions; }
// Forward declaration of `LocationDesiredAccuracy` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class LocationDesiredAccuracy; }
// Forward declaration of `CoordinateType` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class CoordinateType; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "Location.hpp"
#include "JLocation.hpp"
#include "Coordinate.hpp"
#include "JCoordinate.hpp"
#include <string>
#include <optional>
#include "Geocode.hpp"
#include "JGeocode.hpp"
#include "GeocodePoi.hpp"
#include <vector>
#include "JGeocodePoi.hpp"
#include "GetLocationOptions.hpp"
#include "JGetLocationOptions.hpp"
#include "LocationDesiredAccuracy.hpp"
#include "JLocationDesiredAccuracy.hpp"
#include "CoordinateType.hpp"
#include "JCoordinateType.hpp"

namespace margelo::nitro::nitrobaidugeolocation {

  jni::local_ref<JHybridNitroBaiduGeolocationSpec::jhybriddata> JHybridNitroBaiduGeolocationSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroBaiduGeolocationSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroBaiduGeolocationSpec::initHybrid),
    });
  }

  size_t JHybridNitroBaiduGeolocationSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroBaiduGeolocationSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  double JHybridNitroBaiduGeolocationSpec::sum(double num1, double num2) {
    static const auto method = javaClassStatic()->getMethod<double(double /* num1 */, double /* num2 */)>("sum");
    auto __result = method(_javaPart, num1, num2);
    return __result;
  }
  void JHybridNitroBaiduGeolocationSpec::agreePrivacyPolicy(bool agree) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* agree */)>("agreePrivacyPolicy");
    method(_javaPart, agree);
  }
  std::shared_ptr<Promise<double>> JHybridNitroBaiduGeolocationSpec::initialize(const std::string& ak) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* ak */)>("initialize");
    auto __result = method(_javaPart, jni::make_jstring(ak));
    return [&]() {
      auto __promise = Promise<double>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JDouble>(__boxedResult);
        __promise->resolve(__result->value());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<Location>> JHybridNitroBaiduGeolocationSpec::getCurrentLocation(const GetLocationOptions& options) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JGetLocationOptions> /* options */)>("getCurrentLocation");
    auto __result = method(_javaPart, JGetLocationOptions::fromCpp(options));
    return [&]() {
      auto __promise = Promise<Location>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JLocation>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrobaidugeolocation
