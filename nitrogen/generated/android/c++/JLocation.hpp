///
/// JLocation.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Location.hpp"

#include "Coordinate.hpp"
#include "Geocode.hpp"
#include "GeocodePoi.hpp"
#include "JCoordinate.hpp"
#include "JGeocode.hpp"
#include "JGeocodePoi.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::nitrobaidugeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Location" and the the Kotlin data class "Location".
   */
  struct JLocation final: public jni::JavaClass<JLocation> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrobaidugeolocation/Location;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Location by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Location toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCoordinate = clazz->getField<JCoordinate>("coordinate");
      jni::local_ref<JCoordinate> coordinate = this->getFieldValue(fieldCoordinate);
      static const auto fieldBuildingName = clazz->getField<jni::JString>("buildingName");
      jni::local_ref<jni::JString> buildingName = this->getFieldValue(fieldBuildingName);
      static const auto fieldFloorString = clazz->getField<jni::JString>("floorString");
      jni::local_ref<jni::JString> floorString = this->getFieldValue(fieldFloorString);
      static const auto fieldBuildingID = clazz->getField<jni::JString>("buildingID");
      jni::local_ref<jni::JString> buildingID = this->getFieldValue(fieldBuildingID);
      static const auto fieldGeocode = clazz->getField<JGeocode>("geocode");
      jni::local_ref<JGeocode> geocode = this->getFieldValue(fieldGeocode);
      static const auto fieldMockProbability = clazz->getField<jni::JDouble>("mockProbability");
      jni::local_ref<jni::JDouble> mockProbability = this->getFieldValue(fieldMockProbability);
      return Location(
        coordinate->toCpp(),
        buildingName != nullptr ? std::make_optional(buildingName->toStdString()) : std::nullopt,
        floorString != nullptr ? std::make_optional(floorString->toStdString()) : std::nullopt,
        buildingID != nullptr ? std::make_optional(buildingID->toStdString()) : std::nullopt,
        geocode != nullptr ? std::make_optional(geocode->toCpp()) : std::nullopt,
        mockProbability != nullptr ? std::make_optional(mockProbability->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JLocation::javaobject> fromCpp(const Location& value) {
      return newInstance(
        JCoordinate::fromCpp(value.coordinate),
        value.buildingName.has_value() ? jni::make_jstring(value.buildingName.value()) : nullptr,
        value.floorString.has_value() ? jni::make_jstring(value.floorString.value()) : nullptr,
        value.buildingID.has_value() ? jni::make_jstring(value.buildingID.value()) : nullptr,
        value.geocode.has_value() ? JGeocode::fromCpp(value.geocode.value()) : nullptr,
        value.mockProbability.has_value() ? jni::JDouble::valueOf(value.mockProbability.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrobaidugeolocation
