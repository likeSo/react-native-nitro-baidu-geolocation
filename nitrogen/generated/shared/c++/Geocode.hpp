///
/// Geocode.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `GeocodePoi` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct GeocodePoi; }

#include <string>
#include <optional>
#include "GeocodePoi.hpp"
#include <vector>

namespace margelo::nitro::nitrobaidugeolocation {

  /**
   * A struct which can be represented as a JavaScript object (Geocode).
   */
  struct Geocode {
  public:
    std::optional<std::string> country     SWIFT_PRIVATE;
    std::optional<std::string> countryCode     SWIFT_PRIVATE;
    std::optional<std::string> province     SWIFT_PRIVATE;
    std::optional<std::string> city     SWIFT_PRIVATE;
    std::optional<std::string> district     SWIFT_PRIVATE;
    std::optional<std::string> town     SWIFT_PRIVATE;
    std::optional<std::string> street     SWIFT_PRIVATE;
    std::optional<std::string> streetNumber     SWIFT_PRIVATE;
    std::optional<std::string> cityCode     SWIFT_PRIVATE;
    std::optional<std::string> adCode     SWIFT_PRIVATE;
    std::optional<std::string> locationDescribe     SWIFT_PRIVATE;
    std::optional<std::vector<GeocodePoi>> poiList     SWIFT_PRIVATE;
    std::optional<GeocodePoi> poi     SWIFT_PRIVATE;

  public:
    Geocode() = default;
    explicit Geocode(std::optional<std::string> country, std::optional<std::string> countryCode, std::optional<std::string> province, std::optional<std::string> city, std::optional<std::string> district, std::optional<std::string> town, std::optional<std::string> street, std::optional<std::string> streetNumber, std::optional<std::string> cityCode, std::optional<std::string> adCode, std::optional<std::string> locationDescribe, std::optional<std::vector<GeocodePoi>> poiList, std::optional<GeocodePoi> poi): country(country), countryCode(countryCode), province(province), city(city), district(district), town(town), street(street), streetNumber(streetNumber), cityCode(cityCode), adCode(adCode), locationDescribe(locationDescribe), poiList(poiList), poi(poi) {}
  };

} // namespace margelo::nitro::nitrobaidugeolocation

namespace margelo::nitro {

  // C++ Geocode <> JS Geocode (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrobaidugeolocation::Geocode> final {
    static inline margelo::nitro::nitrobaidugeolocation::Geocode fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrobaidugeolocation::Geocode(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "country")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "countryCode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "province")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "city")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "district")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "town")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "street")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "streetNumber")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cityCode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "adCode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "locationDescribe")),
        JSIConverter<std::optional<std::vector<margelo::nitro::nitrobaidugeolocation::GeocodePoi>>>::fromJSI(runtime, obj.getProperty(runtime, "poiList")),
        JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::GeocodePoi>>::fromJSI(runtime, obj.getProperty(runtime, "poi"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrobaidugeolocation::Geocode& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "country", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.country));
      obj.setProperty(runtime, "countryCode", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.countryCode));
      obj.setProperty(runtime, "province", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.province));
      obj.setProperty(runtime, "city", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.city));
      obj.setProperty(runtime, "district", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.district));
      obj.setProperty(runtime, "town", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.town));
      obj.setProperty(runtime, "street", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.street));
      obj.setProperty(runtime, "streetNumber", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.streetNumber));
      obj.setProperty(runtime, "cityCode", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cityCode));
      obj.setProperty(runtime, "adCode", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.adCode));
      obj.setProperty(runtime, "locationDescribe", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.locationDescribe));
      obj.setProperty(runtime, "poiList", JSIConverter<std::optional<std::vector<margelo::nitro::nitrobaidugeolocation::GeocodePoi>>>::toJSI(runtime, arg.poiList));
      obj.setProperty(runtime, "poi", JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::GeocodePoi>>::toJSI(runtime, arg.poi));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "country"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "countryCode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "province"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "city"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "district"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "town"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "street"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "streetNumber"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cityCode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "adCode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "locationDescribe"))) return false;
      if (!JSIConverter<std::optional<std::vector<margelo::nitro::nitrobaidugeolocation::GeocodePoi>>>::canConvert(runtime, obj.getProperty(runtime, "poiList"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::GeocodePoi>>::canConvert(runtime, obj.getProperty(runtime, "poi"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
