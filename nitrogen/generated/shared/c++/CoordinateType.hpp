///
/// CoordinateType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrobaidugeolocation {

  /**
   * An enum which can be represented as a JavaScript union (CoordinateType).
   */
  enum class CoordinateType {
    BMK09LL      SWIFT_NAME(bmk09ll) = 0,
    BMK09MC      SWIFT_NAME(bmk09mc) = 1,
    WGS84      SWIFT_NAME(wgs84) = 2,
    GCJ02      SWIFT_NAME(gcj02) = 3,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrobaidugeolocation

namespace margelo::nitro {

  // C++ CoordinateType <> JS CoordinateType (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrobaidugeolocation::CoordinateType> final {
    static inline margelo::nitro::nitrobaidugeolocation::CoordinateType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("bmk09ll"): return margelo::nitro::nitrobaidugeolocation::CoordinateType::BMK09LL;
        case hashString("bmk09mc"): return margelo::nitro::nitrobaidugeolocation::CoordinateType::BMK09MC;
        case hashString("wgs84"): return margelo::nitro::nitrobaidugeolocation::CoordinateType::WGS84;
        case hashString("gcj02"): return margelo::nitro::nitrobaidugeolocation::CoordinateType::GCJ02;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum CoordinateType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrobaidugeolocation::CoordinateType arg) {
      switch (arg) {
        case margelo::nitro::nitrobaidugeolocation::CoordinateType::BMK09LL: return JSIConverter<std::string>::toJSI(runtime, "bmk09ll");
        case margelo::nitro::nitrobaidugeolocation::CoordinateType::BMK09MC: return JSIConverter<std::string>::toJSI(runtime, "bmk09mc");
        case margelo::nitro::nitrobaidugeolocation::CoordinateType::WGS84: return JSIConverter<std::string>::toJSI(runtime, "wgs84");
        case margelo::nitro::nitrobaidugeolocation::CoordinateType::GCJ02: return JSIConverter<std::string>::toJSI(runtime, "gcj02");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert CoordinateType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("bmk09ll"):
        case hashString("bmk09mc"):
        case hashString("wgs84"):
        case hashString("gcj02"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
