///
/// LocationDesiredAccuracy.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrobaidugeolocation {

  /**
   * An enum which can be represented as a JavaScript union (LocationDesiredAccuracy).
   */
  enum class LocationDesiredAccuracy {
    BEST      SWIFT_NAME(best) = 0,
    BESTFORNAVIGATION      SWIFT_NAME(bestfornavigation) = 1,
    NEARESTTENMETERS      SWIFT_NAME(nearesttenmeters) = 2,
    HUNDREDMETERS      SWIFT_NAME(hundredmeters) = 3,
    KILOMETER      SWIFT_NAME(kilometer) = 4,
    THREEKILOMETERS      SWIFT_NAME(threekilometers) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrobaidugeolocation

namespace margelo::nitro {

  // C++ LocationDesiredAccuracy <> JS LocationDesiredAccuracy (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy> final {
    static inline margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("best"): return margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::BEST;
        case hashString("bestForNavigation"): return margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::BESTFORNAVIGATION;
        case hashString("nearestTenMeters"): return margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::NEARESTTENMETERS;
        case hashString("hundredMeters"): return margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::HUNDREDMETERS;
        case hashString("kilometer"): return margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::KILOMETER;
        case hashString("threeKilometers"): return margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::THREEKILOMETERS;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum LocationDesiredAccuracy - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy arg) {
      switch (arg) {
        case margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::BEST: return JSIConverter<std::string>::toJSI(runtime, "best");
        case margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::BESTFORNAVIGATION: return JSIConverter<std::string>::toJSI(runtime, "bestForNavigation");
        case margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::NEARESTTENMETERS: return JSIConverter<std::string>::toJSI(runtime, "nearestTenMeters");
        case margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::HUNDREDMETERS: return JSIConverter<std::string>::toJSI(runtime, "hundredMeters");
        case margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::KILOMETER: return JSIConverter<std::string>::toJSI(runtime, "kilometer");
        case margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy::THREEKILOMETERS: return JSIConverter<std::string>::toJSI(runtime, "threeKilometers");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert LocationDesiredAccuracy to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("best"):
        case hashString("bestForNavigation"):
        case hashString("nearestTenMeters"):
        case hashString("hundredMeters"):
        case hashString("kilometer"):
        case hashString("threeKilometers"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
