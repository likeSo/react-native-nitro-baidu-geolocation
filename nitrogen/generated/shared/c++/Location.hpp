///
/// Location.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Coordinate` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Coordinate; }
// Forward declaration of `Geocode` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Geocode; }

#include "Coordinate.hpp"
#include <string>
#include <optional>
#include "Geocode.hpp"

namespace margelo::nitro::nitrobaidugeolocation {

  /**
   * A struct which can be represented as a JavaScript object (Location).
   */
  struct Location {
  public:
    Coordinate coordinate     SWIFT_PRIVATE;
    std::optional<std::string> buildingName     SWIFT_PRIVATE;
    std::optional<std::string> floorString     SWIFT_PRIVATE;
    std::optional<std::string> buildingID     SWIFT_PRIVATE;
    std::optional<Geocode> geocode     SWIFT_PRIVATE;
    std::optional<double> mockProbability     SWIFT_PRIVATE;

  public:
    Location() = default;
    explicit Location(Coordinate coordinate, std::optional<std::string> buildingName, std::optional<std::string> floorString, std::optional<std::string> buildingID, std::optional<Geocode> geocode, std::optional<double> mockProbability): coordinate(coordinate), buildingName(buildingName), floorString(floorString), buildingID(buildingID), geocode(geocode), mockProbability(mockProbability) {}
  };

} // namespace margelo::nitro::nitrobaidugeolocation

namespace margelo::nitro {

  // C++ Location <> JS Location (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrobaidugeolocation::Location> final {
    static inline margelo::nitro::nitrobaidugeolocation::Location fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrobaidugeolocation::Location(
        JSIConverter<margelo::nitro::nitrobaidugeolocation::Coordinate>::fromJSI(runtime, obj.getProperty(runtime, "coordinate")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "buildingName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "floorString")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "buildingID")),
        JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::Geocode>>::fromJSI(runtime, obj.getProperty(runtime, "geocode")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "mockProbability"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrobaidugeolocation::Location& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "coordinate", JSIConverter<margelo::nitro::nitrobaidugeolocation::Coordinate>::toJSI(runtime, arg.coordinate));
      obj.setProperty(runtime, "buildingName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.buildingName));
      obj.setProperty(runtime, "floorString", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.floorString));
      obj.setProperty(runtime, "buildingID", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.buildingID));
      obj.setProperty(runtime, "geocode", JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::Geocode>>::toJSI(runtime, arg.geocode));
      obj.setProperty(runtime, "mockProbability", JSIConverter<std::optional<double>>::toJSI(runtime, arg.mockProbability));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<margelo::nitro::nitrobaidugeolocation::Coordinate>::canConvert(runtime, obj.getProperty(runtime, "coordinate"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "buildingName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "floorString"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "buildingID"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::Geocode>>::canConvert(runtime, obj.getProperty(runtime, "geocode"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "mockProbability"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
