///
/// GetLocationOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `LocationDesiredAccuracy` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class LocationDesiredAccuracy; }
// Forward declaration of `CoordinateType` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class CoordinateType; }

#include "LocationDesiredAccuracy.hpp"
#include <optional>
#include "CoordinateType.hpp"
#include <string>

namespace margelo::nitro::nitrobaidugeolocation {

  /**
   * A struct which can be represented as a JavaScript object (GetLocationOptions).
   */
  struct GetLocationOptions {
  public:
    std::optional<LocationDesiredAccuracy> desiredAccuracy     SWIFT_PRIVATE;
    std::optional<bool> allowsBackgroundLocationUpdates     SWIFT_PRIVATE;
    std::optional<CoordinateType> coordinateType     SWIFT_PRIVATE;
    std::optional<bool> locatingWithReGeocode     SWIFT_PRIVATE;
    std::optional<std::string> userId     SWIFT_PRIVATE;

  public:
    GetLocationOptions() = default;
    explicit GetLocationOptions(std::optional<LocationDesiredAccuracy> desiredAccuracy, std::optional<bool> allowsBackgroundLocationUpdates, std::optional<CoordinateType> coordinateType, std::optional<bool> locatingWithReGeocode, std::optional<std::string> userId): desiredAccuracy(desiredAccuracy), allowsBackgroundLocationUpdates(allowsBackgroundLocationUpdates), coordinateType(coordinateType), locatingWithReGeocode(locatingWithReGeocode), userId(userId) {}
  };

} // namespace margelo::nitro::nitrobaidugeolocation

namespace margelo::nitro {

  // C++ GetLocationOptions <> JS GetLocationOptions (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrobaidugeolocation::GetLocationOptions> final {
    static inline margelo::nitro::nitrobaidugeolocation::GetLocationOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrobaidugeolocation::GetLocationOptions(
        JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy>>::fromJSI(runtime, obj.getProperty(runtime, "desiredAccuracy")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "allowsBackgroundLocationUpdates")),
        JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::CoordinateType>>::fromJSI(runtime, obj.getProperty(runtime, "coordinateType")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "locatingWithReGeocode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "userId"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrobaidugeolocation::GetLocationOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "desiredAccuracy", JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy>>::toJSI(runtime, arg.desiredAccuracy));
      obj.setProperty(runtime, "allowsBackgroundLocationUpdates", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.allowsBackgroundLocationUpdates));
      obj.setProperty(runtime, "coordinateType", JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::CoordinateType>>::toJSI(runtime, arg.coordinateType));
      obj.setProperty(runtime, "locatingWithReGeocode", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.locatingWithReGeocode));
      obj.setProperty(runtime, "userId", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.userId));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::LocationDesiredAccuracy>>::canConvert(runtime, obj.getProperty(runtime, "desiredAccuracy"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "allowsBackgroundLocationUpdates"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitrobaidugeolocation::CoordinateType>>::canConvert(runtime, obj.getProperty(runtime, "coordinateType"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "locatingWithReGeocode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "userId"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
