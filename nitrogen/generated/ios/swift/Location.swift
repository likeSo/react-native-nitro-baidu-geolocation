///
/// Location.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Location`, backed by a C++ struct.
 */
public typealias Location = margelo.nitro.nitrobaidugeolocation.Location

public extension Location {
  private typealias bridge = margelo.nitro.nitrobaidugeolocation.bridge.swift

  /**
   * Create a new instance of `Location`.
   */
  init(coordinate: Coordinate, buildingName: String?, floorString: String?, buildingID: String?, geocode: Geocode?, mockProbability: Double?) {
    self.init(coordinate, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = buildingName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = floorString {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = buildingID {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_Geocode_ in
      if let __unwrappedValue = geocode {
        return bridge.create_std__optional_Geocode_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = mockProbability {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var coordinate: Coordinate {
    @inline(__always)
    get {
      return self.__coordinate
    }
    @inline(__always)
    set {
      self.__coordinate = newValue
    }
  }
  
  var buildingName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__buildingName) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__buildingName)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__buildingName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var floorString: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__floorString) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__floorString)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__floorString = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var buildingID: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__buildingID) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__buildingID)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__buildingID = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var geocode: Geocode? {
    @inline(__always)
    get {
      return { () -> Geocode? in
        if bridge.has_value_std__optional_Geocode_(self.__geocode) {
          let __unwrapped = bridge.get_std__optional_Geocode_(self.__geocode)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__geocode = { () -> bridge.std__optional_Geocode_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Geocode_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var mockProbability: Double? {
    @inline(__always)
    get {
      return self.__mockProbability.value
    }
    @inline(__always)
    set {
      self.__mockProbability = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
