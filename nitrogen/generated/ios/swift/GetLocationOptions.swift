///
/// GetLocationOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `GetLocationOptions`, backed by a C++ struct.
 */
public typealias GetLocationOptions = margelo.nitro.nitrobaidugeolocation.GetLocationOptions

public extension GetLocationOptions {
  private typealias bridge = margelo.nitro.nitrobaidugeolocation.bridge.swift

  /**
   * Create a new instance of `GetLocationOptions`.
   */
  init(desiredAccuracy: LocationDesiredAccuracy?, allowsBackgroundLocationUpdates: Bool?, coordinateType: CoordinateType?, locatingWithReGeocode: Bool?, userId: String?) {
    self.init({ () -> bridge.std__optional_LocationDesiredAccuracy_ in
      if let __unwrappedValue = desiredAccuracy {
        return bridge.create_std__optional_LocationDesiredAccuracy_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = allowsBackgroundLocationUpdates {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_CoordinateType_ in
      if let __unwrappedValue = coordinateType {
        return bridge.create_std__optional_CoordinateType_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = locatingWithReGeocode {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = userId {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var desiredAccuracy: LocationDesiredAccuracy? {
    @inline(__always)
    get {
      return self.__desiredAccuracy.value
    }
    @inline(__always)
    set {
      self.__desiredAccuracy = { () -> bridge.std__optional_LocationDesiredAccuracy_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_LocationDesiredAccuracy_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var allowsBackgroundLocationUpdates: Bool? {
    @inline(__always)
    get {
      return self.__allowsBackgroundLocationUpdates.value
    }
    @inline(__always)
    set {
      self.__allowsBackgroundLocationUpdates = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var coordinateType: CoordinateType? {
    @inline(__always)
    get {
      return self.__coordinateType.value
    }
    @inline(__always)
    set {
      self.__coordinateType = { () -> bridge.std__optional_CoordinateType_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_CoordinateType_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var locatingWithReGeocode: Bool? {
    @inline(__always)
    get {
      return self.__locatingWithReGeocode.value
    }
    @inline(__always)
    set {
      self.__locatingWithReGeocode = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var userId: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__userId) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__userId)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__userId = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
