///
/// NitroBaiduGeolocation-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `CoordinateType` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class CoordinateType; }
// Forward declaration of `Coordinate` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Coordinate; }
// Forward declaration of `GeocodePoi` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct GeocodePoi; }
// Forward declaration of `Geocode` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Geocode; }
// Forward declaration of `HybridNitroBaiduGeolocationSpec` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { class HybridNitroBaiduGeolocationSpec; }
// Forward declaration of `LocationDesiredAccuracy` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class LocationDesiredAccuracy; }
// Forward declaration of `Location` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Location; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroBaiduGeolocationSpec_cxx` to properly resolve imports.
namespace NitroBaiduGeolocation { class HybridNitroBaiduGeolocationSpec_cxx; }

// Include C++ defined types
#include "Coordinate.hpp"
#include "CoordinateType.hpp"
#include "Geocode.hpp"
#include "GeocodePoi.hpp"
#include "HybridNitroBaiduGeolocationSpec.hpp"
#include "Location.hpp"
#include "LocationDesiredAccuracy.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrobaidugeolocation::bridge::swift {

  // pragma MARK: std::shared_ptr<Promise<double>>
  /**
   * Specialized version of `std::shared_ptr<Promise<double>>`.
   */
  using std__shared_ptr_Promise_double__ = std::shared_ptr<Promise<double>>;
  inline std::shared_ptr<Promise<double>> create_std__shared_ptr_Promise_double__() noexcept {
    return Promise<double>::create();
  }
  inline PromiseHolder<double> wrap_std__shared_ptr_Promise_double__(std::shared_ptr<Promise<double>> promise) noexcept {
    return PromiseHolder<double>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(double /* result */)>
  /**
   * Specialized version of `std::function<void(double)>`.
   */
  using Func_void_double = std::function<void(double /* result */)>;
  /**
   * Wrapper class for a `std::function<void(double / * result * /)>`, this can be used from Swift.
   */
  class Func_void_double_Wrapper final {
  public:
    explicit Func_void_double_Wrapper(std::function<void(double /* result */)>&& func): _function(std::make_unique<std::function<void(double /* result */)>>(std::move(func))) {}
    inline void call(double result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(double /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_double create_Func_void_double(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_double_Wrapper wrap_Func_void_double(Func_void_double value) noexcept {
    return Func_void_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_unique<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) noexcept {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) noexcept {
    return std::optional<double>(value);
  }
  inline bool has_value_std__optional_double_(const std::optional<double>& optional) noexcept {
    return optional.has_value();
  }
  inline double get_std__optional_double_(const std::optional<double>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::vector<GeocodePoi>
  /**
   * Specialized version of `std::vector<GeocodePoi>`.
   */
  using std__vector_GeocodePoi_ = std::vector<GeocodePoi>;
  inline std::vector<GeocodePoi> create_std__vector_GeocodePoi_(size_t size) noexcept {
    std::vector<GeocodePoi> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<GeocodePoi>>
  /**
   * Specialized version of `std::optional<std::vector<GeocodePoi>>`.
   */
  using std__optional_std__vector_GeocodePoi__ = std::optional<std::vector<GeocodePoi>>;
  inline std::optional<std::vector<GeocodePoi>> create_std__optional_std__vector_GeocodePoi__(const std::vector<GeocodePoi>& value) noexcept {
    return std::optional<std::vector<GeocodePoi>>(value);
  }
  inline bool has_value_std__optional_std__vector_GeocodePoi__(const std::optional<std::vector<GeocodePoi>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::vector<GeocodePoi> get_std__optional_std__vector_GeocodePoi__(const std::optional<std::vector<GeocodePoi>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<GeocodePoi>
  /**
   * Specialized version of `std::optional<GeocodePoi>`.
   */
  using std__optional_GeocodePoi_ = std::optional<GeocodePoi>;
  inline std::optional<GeocodePoi> create_std__optional_GeocodePoi_(const GeocodePoi& value) noexcept {
    return std::optional<GeocodePoi>(value);
  }
  inline bool has_value_std__optional_GeocodePoi_(const std::optional<GeocodePoi>& optional) noexcept {
    return optional.has_value();
  }
  inline GeocodePoi get_std__optional_GeocodePoi_(const std::optional<GeocodePoi>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<Geocode>
  /**
   * Specialized version of `std::optional<Geocode>`.
   */
  using std__optional_Geocode_ = std::optional<Geocode>;
  inline std::optional<Geocode> create_std__optional_Geocode_(const Geocode& value) noexcept {
    return std::optional<Geocode>(value);
  }
  inline bool has_value_std__optional_Geocode_(const std::optional<Geocode>& optional) noexcept {
    return optional.has_value();
  }
  inline Geocode get_std__optional_Geocode_(const std::optional<Geocode>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<Promise<Location>>
  /**
   * Specialized version of `std::shared_ptr<Promise<Location>>`.
   */
  using std__shared_ptr_Promise_Location__ = std::shared_ptr<Promise<Location>>;
  inline std::shared_ptr<Promise<Location>> create_std__shared_ptr_Promise_Location__() noexcept {
    return Promise<Location>::create();
  }
  inline PromiseHolder<Location> wrap_std__shared_ptr_Promise_Location__(std::shared_ptr<Promise<Location>> promise) noexcept {
    return PromiseHolder<Location>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const Location& /* result */)>
  /**
   * Specialized version of `std::function<void(const Location&)>`.
   */
  using Func_void_Location = std::function<void(const Location& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const Location& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_Location_Wrapper final {
  public:
    explicit Func_void_Location_Wrapper(std::function<void(const Location& /* result */)>&& func): _function(std::make_unique<std::function<void(const Location& /* result */)>>(std::move(func))) {}
    inline void call(Location result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const Location& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_Location create_Func_void_Location(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_Location_Wrapper wrap_Func_void_Location(Func_void_Location value) noexcept {
    return Func_void_Location_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<LocationDesiredAccuracy>
  /**
   * Specialized version of `std::optional<LocationDesiredAccuracy>`.
   */
  using std__optional_LocationDesiredAccuracy_ = std::optional<LocationDesiredAccuracy>;
  inline std::optional<LocationDesiredAccuracy> create_std__optional_LocationDesiredAccuracy_(const LocationDesiredAccuracy& value) noexcept {
    return std::optional<LocationDesiredAccuracy>(value);
  }
  inline bool has_value_std__optional_LocationDesiredAccuracy_(const std::optional<LocationDesiredAccuracy>& optional) noexcept {
    return optional.has_value();
  }
  inline LocationDesiredAccuracy get_std__optional_LocationDesiredAccuracy_(const std::optional<LocationDesiredAccuracy>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) noexcept {
    return std::optional<bool>(value);
  }
  inline bool has_value_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return optional.has_value();
  }
  inline bool get_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<CoordinateType>
  /**
   * Specialized version of `std::optional<CoordinateType>`.
   */
  using std__optional_CoordinateType_ = std::optional<CoordinateType>;
  inline std::optional<CoordinateType> create_std__optional_CoordinateType_(const CoordinateType& value) noexcept {
    return std::optional<CoordinateType>(value);
  }
  inline bool has_value_std__optional_CoordinateType_(const std::optional<CoordinateType>& optional) noexcept {
    return optional.has_value();
  }
  inline CoordinateType get_std__optional_CoordinateType_(const std::optional<CoordinateType>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroBaiduGeolocationSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroBaiduGeolocationSpec>`.
   */
  using std__shared_ptr_HybridNitroBaiduGeolocationSpec_ = std::shared_ptr<HybridNitroBaiduGeolocationSpec>;
  std::shared_ptr<HybridNitroBaiduGeolocationSpec> create_std__shared_ptr_HybridNitroBaiduGeolocationSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridNitroBaiduGeolocationSpec_(std__shared_ptr_HybridNitroBaiduGeolocationSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroBaiduGeolocationSpec>
  using std__weak_ptr_HybridNitroBaiduGeolocationSpec_ = std::weak_ptr<HybridNitroBaiduGeolocationSpec>;
  inline std__weak_ptr_HybridNitroBaiduGeolocationSpec_ weakify_std__shared_ptr_HybridNitroBaiduGeolocationSpec_(const std::shared_ptr<HybridNitroBaiduGeolocationSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) noexcept {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) noexcept {
    return Result<double>::withError(error);
  }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<double>>>
  using Result_std__shared_ptr_Promise_double___ = Result<std::shared_ptr<Promise<double>>>;
  inline Result_std__shared_ptr_Promise_double___ create_Result_std__shared_ptr_Promise_double___(const std::shared_ptr<Promise<double>>& value) noexcept {
    return Result<std::shared_ptr<Promise<double>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_double___ create_Result_std__shared_ptr_Promise_double___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<double>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<Location>>>
  using Result_std__shared_ptr_Promise_Location___ = Result<std::shared_ptr<Promise<Location>>>;
  inline Result_std__shared_ptr_Promise_Location___ create_Result_std__shared_ptr_Promise_Location___(const std::shared_ptr<Promise<Location>>& value) noexcept {
    return Result<std::shared_ptr<Promise<Location>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_Location___ create_Result_std__shared_ptr_Promise_Location___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<Location>>>::withError(error);
  }

} // namespace margelo::nitro::nitrobaidugeolocation::bridge::swift
