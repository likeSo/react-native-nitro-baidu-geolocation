///
/// NitroBaiduGeolocation-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "NitroBaiduGeolocation-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridNitroBaiduGeolocationSpecSwift.hpp"
#include "NitroBaiduGeolocation-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrobaidugeolocation::bridge::swift {

  // pragma MARK: std::function<void(double /* result */)>
  Func_void_double create_Func_void_double(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBaiduGeolocation::Func_void_double::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](double result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBaiduGeolocation::Func_void_std__exception_ptr::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::exception_ptr& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::function<void(const Location& /* result */)>
  Func_void_Location create_Func_void_Location(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroBaiduGeolocation::Func_void_Location::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const Location& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroBaiduGeolocationSpec>
  std::shared_ptr<HybridNitroBaiduGeolocationSpec> create_std__shared_ptr_HybridNitroBaiduGeolocationSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroBaiduGeolocation::HybridNitroBaiduGeolocationSpec_cxx swiftPart = NitroBaiduGeolocation::HybridNitroBaiduGeolocationSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::nitrobaidugeolocation::HybridNitroBaiduGeolocationSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridNitroBaiduGeolocationSpec_(std__shared_ptr_HybridNitroBaiduGeolocationSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::nitrobaidugeolocation::HybridNitroBaiduGeolocationSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::nitrobaidugeolocation::HybridNitroBaiduGeolocationSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridNitroBaiduGeolocationSpec\" is not implemented in Swift!");
    }
    #endif
    NitroBaiduGeolocation::HybridNitroBaiduGeolocationSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::nitrobaidugeolocation::bridge::swift
