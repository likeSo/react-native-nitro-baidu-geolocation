///
/// HybridNitroBaiduGeolocationSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroBaiduGeolocationSpec.hpp"

// Forward declaration of `HybridNitroBaiduGeolocationSpec_cxx` to properly resolve imports.
namespace NitroBaiduGeolocation { class HybridNitroBaiduGeolocationSpec_cxx; }

// Forward declaration of `Location` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Location; }
// Forward declaration of `Coordinate` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Coordinate; }
// Forward declaration of `Geocode` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct Geocode; }
// Forward declaration of `GeocodePoi` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct GeocodePoi; }
// Forward declaration of `GetLocationOptions` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { struct GetLocationOptions; }
// Forward declaration of `LocationDesiredAccuracy` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class LocationDesiredAccuracy; }
// Forward declaration of `CoordinateType` to properly resolve imports.
namespace margelo::nitro::nitrobaidugeolocation { enum class CoordinateType; }

#include <NitroModules/Promise.hpp>
#include <string>
#include "Location.hpp"
#include "Coordinate.hpp"
#include <optional>
#include "Geocode.hpp"
#include "GeocodePoi.hpp"
#include <vector>
#include "GetLocationOptions.hpp"
#include "LocationDesiredAccuracy.hpp"
#include "CoordinateType.hpp"

#include "NitroBaiduGeolocation-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrobaidugeolocation {

  /**
   * The C++ part of HybridNitroBaiduGeolocationSpec_cxx.swift.
   *
   * HybridNitroBaiduGeolocationSpecSwift (C++) accesses HybridNitroBaiduGeolocationSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroBaiduGeolocationSpec_cxx can directly inherit from the C++ class HybridNitroBaiduGeolocationSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroBaiduGeolocationSpecSwift: public virtual HybridNitroBaiduGeolocationSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroBaiduGeolocationSpecSwift(const NitroBaiduGeolocation::HybridNitroBaiduGeolocationSpec_cxx& swiftPart):
      HybridObject(HybridNitroBaiduGeolocationSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBaiduGeolocation::HybridNitroBaiduGeolocationSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double sum(double num1, double num2) override {
      auto __result = _swiftPart.sum(std::forward<decltype(num1)>(num1), std::forward<decltype(num2)>(num2));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void agreePrivacyPolicy(bool agree) override {
      auto __result = _swiftPart.agreePrivacyPolicy(std::forward<decltype(agree)>(agree));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<double>> initialize(const std::string& ak) override {
      auto __result = _swiftPart.initialize(ak);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<Location>> getCurrentLocation(const GetLocationOptions& options) override {
      auto __result = _swiftPart.getCurrentLocation(options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroBaiduGeolocation::HybridNitroBaiduGeolocationSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrobaidugeolocation
